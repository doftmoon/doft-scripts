#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 doftmoon
set -euo pipefail

DB_PASS="1313"
DB_USER="testuser"
DB_USER_PASS="1313"
DB_NAME="test"

# prefix is used to ensure no other container matches the test containers
readonly PREFIX="test"

# what os port is db port forwarded to
# in case the host os already runs db instance on standard port change it
readonly PG_PORT="5432"
readonly MYSQL_PORT="3306"
readonly ORA_PORT="1521"
readonly MSSQL_PORT="1433"
readonly MONGO_PORT="8081"

info() {
   if command -v gum &>/dev/null; then
      gum style --foreground 10 "$1"
   else
      echo -e "\e[32mINFO:\e[0m $1"
   fi
}

warn() {
   if command -v gum &>/dev/null; then
      gum style --foreground 11 "$1"
   else
      echo -e "\e[33mWARNING:\e[0m $1"
   fi
}

error() {
   if command -v gum &>/dev/null; then
      gum style --foreground 9 "$1" >&2
   else
      echo -e "\e[31mERROR:\e[0m $1" >&2
   fi
   exit 1
}

confirm() {
   if command -v gum &>/dev/null; then
      gum confirm "$1"
   else
      echo -n "$1 (y/n): "; read -r r; [[ "$r" =~ [Yy]$ ]]
   fi
}

choose() {
   local prompt="$1"
   shift
   if command -v gum &>/dev/null; then
      gum choose --cursor.foreground 12 --header="$prompt" --header.foreground 12 "$@"
   elif command -v fzf &>/dev/null; then
      printf "%s\n" "$@" |
         fzf --prompt='$prompt' \
            --height=20% \
            --border --cycle
   else
      select opt in "$@"; do [[ -n "$opt" ]] && { echo "$opt"; break; }; done
   fi
}

install_deps() {
   local mgrs=(pacman dnf apt)
   local mgr=$(for m in mgrs; do command -v $m &>/dev/null && { echo ${m%%-*}; break; }; done)
   info "Package manager: $mgr"

   case $mgr in
      pacman) sudo pacman -S gum --no-confirm ;;
      dnf) sudo dnf install -y gum ;;
      apt) sudo apt install -y gum ;;
      *) error "Cannot install gum automatically" ;;
   esac
   info 'Dependencies installed'
}

check_deps() {
   if ! command -v docker &>/dev/null; then
      error "Docker is not installed. Please install it to continue."
   fi

   if ! command -v gum &>/dev/null; then
      warn "'gum' is not installed. It's used for better user experiense"
      if confirm "Install gum?"; then
         install_deps
      fi
   fi
}

check_docker_daemon() {
   if ! docker info &>/dev/null; then
      info "Docker daemon in not started on the standard socket"
      if confirm "Start docker?"; then
         sudo systemctl start docker.service
         info "Docker daemon is starting..."
         sleep 2
      else
         error "Start docker daemon yourself!"
      fi
   fi
}

run_postgres() {
   info "Starting postgres db container..."
   local pg_container_name="$1"
   local pg_image_tag="$2"
   docker run -d \
      --name "$pg_container_name" \
      -p "$PG_PORT:5432" \
      -e POSTGRES_PASSWORD="$DB_PASS" \
      -e POSTGRES_USER="$DB_USER" \
      -e POSTGRES_DATABASE="$DB_NAME" \
      postgres:"$pg_image_tag"

   info "The database created!"
}

run_mysql() {
   info "Starting mysql db container..."
   local mysql_container_name="$1"
   local mysql_image_tag="$2"
   docker run -d \
      --name "$mysql_container_name" \
      -p "$MYSQL_PORT:3306" \
      -e MYSQL_ROOT_PASSWORD="$DB_PASS" \
      -e MYSQL_USER="$DB_USER" \
      -e MYSQL_PASSWORD="$DB_USER_PASS" \
      -e MYSQL_DATABASE="$DB_NAME" \
      mysql:lts
}

run_oracle() {
   info "Starting oracle db container..."
   local ora_container_name="test-oracle-18c"
   docker run -d \
      --name "$ora_container_name" \
      -p 1521:1521 \
      -e ORACLE_PASSWORD="$DB_PASS" \
      -e ORACLE_DATABASE="PDB1" \
      gvenzl/oracle-free:latest

   info "The database created"
}

run_mssql() {
   local mssql_container_name="$1"
   local tag=
   docker run -d \
      --name "$mssql_container_name" \
      -p "$MSSQL_PORT":"$MSSQL_PORT" \
      -e ACCEPT_EULA="Y" \
      -e MSSQL_SA_PASSWORD="$DB_PASS" \
      mcr.microsoft.com/mssql/server:"$tag"

   info "Sql Server created"
}

run_mongodb() {
   info "Not supported for now"
   local mongodb_container_name="test-mongodb"
   docker run -d \
      --name "$mongodb_container_name" \
      -p "$MONGODB_PORT:$MONGODB_PORT"
      mongo:8.0.15

   info "MongoDB created"
}

container_manager() {
   local action="$1"
   local container_name="$2"
   local tag="$3"

   case "$action" in
      continue) exit 0 ;;
      recreate) docker rm -f "$container_name" ;;
      rm) docker rm "$container_name"; exit 0 ;;
      start) docker start "$container_name"; exit 0 ;;
      stop) docker stop "$container_name"; exit 0 ;;
      exit) exit 0 ;;
      *) error "unknown action" ;;
   esac

   case "$container_name" in
      "$PREFIX-postgres-$tag") run_postgres "$container_name" "$tag" ;;
      "$PREFIX-oracle-$tag") run_oracle "$container_name" "$tag" ;;
      *) error "No such container" ;;
   esac
}

# Checks if container already exists and asks what to do: start, recreate, rm
check_container() {
   local container_name="$1"
   local action="continue"

   if docker ps -a --format '{{.Names}}' | grep -q "^$container_name"; then
      info "Container $container_name already exists!"
      local state=$(docker inspect --format '{{.State.Status}}' "$container_name")

      if [[ "$state" == "running" ]]; then
         local options=(recreate rm stop cancel)
         action=$(choose "What would you like to do?" "${options[@]}")
      else
         local options=(recreate rm start cancel)
         action=$(choose "What would you like to do?" "${options[@]}")
      fi
   fi
   echo "$action"
}

print_conninfo() {
echo ""
}

main() {
   [[ $EUID -eq 0 ]] && { error "Don't run as root!"; }

   check_deps
   check_docker_daemon

   local options=(postgres mysql oracle mssql mongodb exit)
   local db=$(choose "Select a database:" "${options[@]}")
   local tag

   case "$db" in
      postgres)
         local ver_list=(latest 17.6 16 12)
         local ver=$(choose "Select Postgres version:" "${ver_list[@]}")
         tag="$ver"
         ;;
      mysql) tag="lts" ;;
      oracle) tag="18c" ;;
      mssql) tag="2022-latest" ;;
      mongodb) tag="8.0.15" ;;
      exit) info "Exiting"; exit 0 ;;
      *) error "No such database choice" ;;
   esac

   local container_name="$PREFIX-$db-$tag"
   local action=$(check_container "$container_name")
   container_manager "$action" "$container_name" "$tag"

   info "Setup finished successfully :3"
}

main
