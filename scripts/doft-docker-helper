#!/usr/bin/env bash
# SPDX-License-Identifier: MIT
# Copyright (c) 2025 doftmoon
#
# script is used to speedup local database development or testing in docker
# most of the errors are thought about, later updates will make UI look and
# feel better and also monitoring tools will be selectable if needed for testing
set -euo pipefail

DB_PASS="1234"
DB_USER="test"
DB_USER_PASS="1234"
DB_NAME="testdb"

# prefix is used to ensure no other container matches the test containers
readonly PREFIX="test"

# what os port is db port forwarded to
# in case the host os already runs db instance on standard port change it
readonly PG_PORT="5432"
readonly MYSQL_PORT="3306"
readonly ORA_PORT="1521"
readonly MSSQL_PORT="1433"
readonly MONGODB_PORT="8081"

info() {
   if command -v gum &>/dev/null; then
      gum style --foreground 10 "$1"
   else
      echo -e "\e[32mINFO:\e[0m $1"
   fi
}

warn() {
   if command -v gum &>/dev/null; then
      gum style --foreground 11 "$1"
   else
      echo -e "\e[33mWARNING:\e[0m $1"
   fi
}

error() {
   if command -v gum &>/dev/null; then
      gum style --foreground 9 "$1" >&2
   else
      echo -e "\e[31mERROR:\e[0m $1" >&2
   fi
   exit 1
}

confirm() {
   if command -v gum &>/dev/null; then
      gum confirm "$1"
   else
      echo -n "$1 (y/n): "; read -r r; [[ "$r" =~ [Yy]$ ]]
   fi
}

choose() {
   local prompt="$1"
   shift
   if command -v gum &>/dev/null; then
      gum choose --cursor.foreground 12 --header="$prompt" --header.foreground 12 "$@"
   elif command -v fzf &>/dev/null; then
      printf "%s\n" "$@" |
         fzf --prompt='$prompt' \
            --height=20% \
            --border --cycle
   else
      select opt in "$@"; do [[ -n "$opt" ]] && { echo "$opt"; break; }; done
   fi
}

install_deps() {
   local mgrs=(pacman dnf zypper apt)
   local mgr=$(for m in ${mgrs[@]}; do command -v $m &>/dev/null && { echo ${m%%-*}; break; }; done)
   info "Package manager: $mgr"

   case $mgr in
      pacman) sudo pacman -S gum --needed --noconfirm ;;
      dnf) sudo dnf install -y gum ;;
      zypper) sudo zypper install -y gum ;;
      # refrence https://github.com/basecamp/omakub/issues/222
      apt)
         warn "In order to install gum and lots of other modern terminal tools"
         warn "The Charm repository needs to be added for apt in order to get package"
         warn "this repo and Charm company is a well-known source of high-quality tools"
         if confirm "Do you want to add Charm repository for apt?"; then
            info "Adding Charm repository for apt..."
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
            echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | sudo tee /etc/apt/sources.list.d/charm.list
            sudo apt update
            sudo apt install gum
         else
            error "Canceled operation"
         fi
         ;;
      *) error "Cannot install gum automatically" ;;
   esac
   info 'Dependencies installed'
}

check_deps() {
   if ! command -v docker &>/dev/null; then
      error "Docker is not installed. Please install it to continue."
   fi

   if ! command -v gum &>/dev/null; then
      warn "'gum' is not installed. It's used for better user experiense"
      if confirm "Install gum?"; then
         install_deps
      fi
   fi
}

check_docker_daemon() {
   if ! docker info &>/dev/null; then
      warn "Docker daemon in not started on the standard socket"
      if confirm "Start docker?"; then
         sudo systemctl start docker.service
         info "Docker daemon is starting..."
         sleep 2
      else
         error "Start docker daemon yourself!"
      fi
   fi
}

print_conninfo() {
   local container_name="$1"
   local container_port="$2"
   local container_db_pass="$3"
   local container_db_user="$4"
   local container_db_name="$5"
   echo ""
   info "Container $container_name started."
   info "Container port: $container_port"
   info "DB user: $container_db_user"
   info "DB pass: $container_db_pass"
   info "DB name: $container_db_name"
}

run_postgres() {
   local pg_container_name="$1"
   local pg_image_tag="$2"
   info "Starting postgres db container..."

   docker run -d \
      --name "$pg_container_name" \
      -p "$PG_PORT:5432" \
      -e POSTGRES_PASSWORD="$DB_PASS" \
      -e POSTGRES_USER="$DB_USER" \
      -e POSTGRES_DATABASE="$DB_NAME" \
      postgres:"$pg_image_tag"

   print_conninfo "$pg_container_name" "$PG_PORT" "$DB_PASS" "$DB_USER" "$DB_NAME"
}

# if errors with DBeaver reference https://github.com/orgs/dbeaver/discussions/19670
run_mysql() {
   local mysql_container_name="$1"
   local mysql_image_tag="$2"
   info "Starting mysql db container..."
   docker run -d \
      --name "$mysql_container_name" \
      -p "$MYSQL_PORT:3306" \
      -e MYSQL_ROOT_PASSWORD="$DB_PASS" \
      -e MYSQL_DATABASE="$DB_NAME" \
      -e MYSQL_USER="$DB_USER" \
      -e MYSQL_PASSWORD="$DB_USER_PASS" \
      mysql:"$mysql_image_tag"

   print_conninfo "$mysql_container_name" "$MYSQL_PORT" "$DB_PASS" "$DB_USER" "$DB_NAME"
}

run_oracle() {
   local ora_container_name="$1"
   local ora_image_tag="$2"
   info "Starting mysql db container..."
   docker run -d \
      --name "$ora_container_name" \
      -p "$ORA_PORT:1521" \
      -e ORACLE_PASSWORD="$DB_PASS" \
      -e APP_USER="$DB_USER" \
      -e APP_USER_PASSWORD="$DB_USER_PASS" \
      -e ORACLE_DATABASE="$DB_NAME" \
      gvenzl/oracle-xe:"$ora_image_tag"

   print_conninfo "$ora_container_name" "$ORA_PORT" "$DB_PASS" "$DB_USER" "$DB_NAME"
}

run_mssql() {
   local mssql_container_name="$1"
   local mssql_image_tag="$2"
   local mssql_db_pass="1234Qwerty?"
   info "Starting mssql db container..."
   docker run -d \
      --name "$mssql_container_name" \
      -p "$MSSQL_PORT:1433" \
      -e ACCEPT_EULA="Y" \
      -e MSSQL_SA_PASSWORD="$mssql_db_pass" \
      mcr.microsoft.com/mssql/server:"$mssql_image_tag"

   print_conninfo "$mssql_container_name" "$MSSQL_PORT" "$mssql_db_pass" "sa" "master"
}

run_mongodb() {
   local mongodb_container_name="$1"
   local mongodb_image_tag="$2"
   info "Starting mongodb container..."
   docker run -d \
      --name "$mongodb_container_name" \
      -p "$MONGODB_PORT:8081" \
      -e MONGO_INITDB_ROOT_USERNAME="$DB_USER" \
      -e MONGO_INITDB_ROOT_PASSWORD="$DB_PASS" \
      -e MONGO_INITDB_DATABASE="$DB_NAME" \
      mongo:"$mongodb_image_tag"

   print_conninfo "$mongodb_container_name" "$MONGODB_PORT" "$DB_PASS" "$DB_USER" "$DB_NAME"
}

container_manager() {
   local action="$1"
   local container_name="$2"
   local tag="$3"

   case "$action" in
      continue) info "Container $container_name will be created" ;;
      recreate) docker rm -f "$container_name" ;;
      rm) docker rm -f "$container_name"; exit 0 ;;
      start) docker start "$container_name"; exit 0 ;;
      stop) docker stop "$container_name"; exit 0 ;;
      cancel) exit 0 ;;
      *) error "Unknown action" ;;
   esac

   case "$container_name" in
      "$PREFIX-postgres-$tag") run_postgres "$container_name" "$tag" ;;
      "$PREFIX-mysql-$tag") run_mysql "$container_name" "$tag" ;;
      "$PREFIX-oracle-$tag") run_oracle "$container_name" "$tag" ;;
      "$PREFIX-mssql-$tag") run_mssql "$container_name" "$tag" ;;
      "$PREFIX-mongodb-$tag") run_mongodb "$container_name" "$tag" ;;
      *) error "No such container" ;;
   esac
}

# Checks if container already exists and asks what to do: start, recreate, rm
check_container() {
   local container_name="$1"
   local action="continue"

   if docker ps -a --format '{{.Names}}' | grep -q "^$container_name"; then
      local state=$(docker inspect --format '{{.State.Status}}' "$container_name")

      if [[ "$state" == "running" ]]; then
         local options=(recreate rm stop cancel)
         action=$(choose "Container $container_name already running. Choose action:" "${options[@]}")
      else
         local options=(recreate rm start cancel)
         action=$(choose "Container $container_name already exists. Choose action:" "${options[@]}")
      fi
   fi

   echo "$action"
}

select_db_ver() {
   local db="$1"
   local tag

   case "$db" in
      postgres)
         local ver_list=(latest 17.6 16 12)
         local ver=$(choose "Select Postgres version:" "${ver_list[@]}")
         tag="$ver"
         ;;
      mysql) tag="lts" ;;
      oracle)
         local ver_list=(21 18-full)
         local ver=$(choose "Select Oracle version:" "${ver_list[@]}")
         tag="$ver"
         ;;
      mssql) tag="2022-latest" ;;
      mongodb) tag="8.0.15" ;;
      exit) info "Exiting"; exit 0 ;;
      *) error "No such database choice" ;;
   esac

   echo "$tag"
}

select_db() {
   local options=($@)
   local db=$(choose "Select a database:" "${options[@]}")

   echo "$db"
}

main() {
   [[ $EUID -eq 0 ]] && { error "Don't run as root!"; }

   check_deps
   check_docker_daemon

   # menu to pick database
   local db_options=(postgres mysql oracle mssql mongodb exit)
   local db=$(select_db "${db_options[@]}")
   if [[ "$db" == "" || "$db" == "exit" ]]; then
      error "Selection canceled"
   fi

   # menu to pick prev selected database version if such provided
   local tag=$(select_db_ver "$db")
   if [[ "$tag" == "" ]]; then
      error "Selection canceled"
   fi

   # checks if container already exists and gives menu with options
   local container_name="$PREFIX-$db-$tag"
   local action=$(check_container "$container_name")
   if [[ "$action" == "" ]]; then
      error "Selection canseled"
   fi

   # takes imput collected from user throughtout script and does what was requested
   container_manager "$action" "$container_name" "$tag"

   info "Setup finished successfully :3"
}

main "$@"
